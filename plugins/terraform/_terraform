#compdef terraform

local -a _terraform_cmds opt_args
_terraform_cmds=(
    'apply:Builds or changes infrastructure'
    'console:Interactive console for Terraform interpolations'
    'destroy:Destroy Terraform-managed infrastructure'
    'fmt:Rewrites config files to canonical format'
    'get:Download and install modules for the configuration'
    'graph:Create a visual graph of Terraform resources'
    'import:Import existing infrastructure into Terraform'
    'init:Initialize a Terraform working directory'
    'output:Read an output from a state file'
    'plan:Generate and show an execution plan'
    'providers:Prints a tree of the providers used in the configuration'
    'push:Upload this Terraform module to Atlas to run'
    'refresh:Update local state file against real resources'
    'show:Inspect Terraform state or plan'
    'state:Advanced state management'
    'taint:Manually mark a resource for recreation'
    'untaint:Manually unmark a resource as tainted'
    'validate:Validates the Terraform files'
    'version:Prints the Terraform version'
    'workspace:Workspace management'
    '0.12upgrade:Rewrites pre-0.12 module source code for v0.12'
)

__012upgrade() {
  _arguments \
    '-yes[Skip the initial introduction messages and interactive confirmation. This can be used to run this command in batch from a script.]' \
    '-force[ Override the heuristic that attempts to detect if a configuration is already written for v0.12 or later.  Some of the transformations made by this command are not idempotent, so re-running against the same module may change the meanings expressions in the module.]'
}

__apply() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-auto-approve[Skip interactive approval of plan before applying.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-no-color[If specified, output wil be colorless.]' \
        '-parallelism=[(10) Limit the number of parallel resource operations.]' \
        '-refresh=[(true) Update state prior to checking for differences. This has no effect if a plan file is given to apply.]' \
        '-state=[(terraform.tfstate) Path to read and save state (unless state-out is specified).]' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]'
}

__console() {
    _arguments \
        '-state=[(terraform.tfstate) Path to read state.]' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]'
}

__destroy() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-auto-approve[Skip interactive approval before destroying.]' \
        '-force[Deprecated: same as auto-approve.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output will contain no color.]' \
        '-parallelism=[(10) Limit the number of concurrent operations.]' \
        '-refresh=[(true) Update state prior to checking for differences. This has no effect if a plan file is given to apply.]' \
        '-state=[(terraform.tfstate) Path to read and save state (unless state-out is specified).]' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]'
}

__fmt() {
    _arguments \
        '-list=[(true) List files whose formatting differs (always false if using STDIN)]' \
        '-write=[(true) Write result to source file instead of STDOUT (always false if using STDIN or -check)]' \
        '-diff=[(false) Display diffs of formatting changes]' \
        '-check=[(false) Check if the input is formatted. Exit status will be 0 if all input is properly formatted and non-zero otherwise.]' \
        '-recursive=[(false) Also process files in subdirectories. By default, only the given directory (or current directory) is processed.]'
}

__get() {
    _arguments \
        '-update=[(false) If true, modules already downloaded will be checked for updates and updated if necessary.]' \
        '-no-color[If specified, output will contain no color.]'
}

__graph() {
    _arguments \
        '-draw-cycles[Highlight any cycles in the graph with colored edges. This helps when diagnosing cycle errors.]' \
        '-no-color[If specified, output will contain no color.]' \
        '-type=[(plan) Type of graph to output. Can be: plan, plan-destroy, apply, validate, input, refresh.]'
}

__import() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-config=[(path) Path to a directory of Terraform configuration files to use to configure the provider. Defaults to pwd. If no config files are present, they must be provided via the input prompts or env vars.]' \
        '-allow-missing-config[Allow import when no resource configuration block exists.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output will contain no color.]' \
        '-provider=[(provider) Specific provider to use for import. This is used for specifying aliases, such as "aws.eu". Defaults to the normal provider prefix of the resource being imported.]' \
        '-state=[(PATH) Path to the source state file. Defaults to the configured backend, or "terraform.tfstate"]' \
        '-state-out=[(PATH) Path to the destination state file to write to. If this is not specified, the source state file will be used. This can be a new or existing path.]' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times. This is only useful with the "-config" flag.]' \
        '-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]'
}

__init() {
    _arguments \
        '-backend=[(true) Configure the backend for this configuration.]' \
        '-backend-config=[This can be either a path to an HCL file with key/value assignments (same format as terraform.tfvars) or a 'key=value' format. This is merged with what is in the configuration file. This can be specified multiple times. The backend type must be in the configuration itself.]' \
        '-force-copy[Suppress prompts about copying state data. This is equivalent to providing a "yes" to all confirmation prompts.]' \
        '-from-module=[Copy the contents of the given module into the target directory before initialization.]' \
        '-get=[(true) Download any modules for this configuration.]' \
        '-get-plugins=[(true) Download any missing plugins for this configuration.]' \
        '-input=[(true) Ask for input if necessary. If false, will error if input was required.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output will contain no color.]' \
        '-plugin-dir[Directory containing plugin binaries. This overrides all default search paths for plugins, and prevents the automatic installation of plugins. This flag can be used multiple times.]' \
        '-reconfigure[Reconfigure the backend, ignoring any saved configuration.]' \
        '-upgrade=[(false) If installing modules (-get) or plugins (-get-plugins), ignore previously-downloaded objects and install the latest version allowed within configured constraints.]' \
        '-verify-plugins=[(true) Verify the authenticity and integrity of automatically downloaded plugins.]'
}

__output() {
    _arguments \
        '-state=[(path) Path to the state file to read. Defaults to "terraform.tfstate".]' \
        '-no-color[ If specified, output will contain no color.]' \
        '-module=[(name) If specified, returns the outputs for a specific module]' \
        '-json[If specified, machine readable output will be printed in JSON format]'
}

__plan() {
    _arguments \
        '-destroy[() If set, a plan will be generated to destroy all resources managed by the given configuration and state.]' \
        '-detailed-exitcode[() Return detailed exit codes when the command exits. This will change the meaning of exit codes to: 0 - Succeeded, diff is empty (no changes); 1 - Errored, 2 - Succeeded; there is a diff]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-module-depth=[(n) Specifies the depth of modules to show in the output. This does not affect the plan itself, only the output shown. By default, this is -1, which will expand all.]' \
        '-no-color[() If specified, output will contain no color.]' \
        '-out=[(path) Write a plan file to the given path. This can be used as input to the "apply" command.]' \
        '-parallelism=[(10) Limit the number of concurrent operations.]' \
        '-refresh=[(true) Update state prior to checking for differences.]' \
        '-state=[(statefile) Path to a Terraform state file to use to look up Terraform-managed resources. By default it will use the state "terraform.tfstate" if it exists.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(foo) Set variables in the Terraform configuration from a file. If "terraform.tfvars" or any ".auto.tfvars" files are present, they will be automatically loaded.]' \
}

__providers() {
    _arguments \

}

__push() {
    _arguments \
        '-atlas-address=[(url) An alternate address to an Atlas instance. Defaults to https://atlas.hashicorp.com.]' \
        '-upload-modules=[(true) If true (default), then the modules being used are all locked at their current checkout and uploaded completely to Atlas. This prevents Atlas from running terraform get for you.]' \
        '-name=[(name) Name of the infrastructure configuration in Atlas. The format of this is: "username/name" so that you can upload configurations not just to your account but to other accounts and organizations. This setting can also be set in the configuration in the Atlas section.]' \
        '-no-color[Disables output with coloring]' \
        '-overwrite=[(foo) Marks a specific variable to be updated on Atlas. Normally, if a variable is already set in Atlas, Terraform will not send the local value (even if it is different). This forces it to send the local value to Atlas. This flag can be repeated multiple times.]' \
        '-token=[(token) Atlas API token to use to authorize the upload. If blank or unspecified, the ATLAS_TOKEN environmental variable will be used.]' \
        '-var=[("foo=bar") Set the value of a variable for the Terraform configuration.]' \
        '-var-file=[(foo) Set the value of variables using a variable file.]' \
        '-vcs=[(true) If true (default), then Terraform will detect if a VCS is in use, such as Git, and will only upload files that are committed to version control. If no version control system is detected, Terraform will upload all files in path (parameter to the command).]'
}

__refresh() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-state=[(path) Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]' \
        '-target=[(resource) A Resource Address to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]:target:__statelist' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]'
}

__show() {
    _arguments \
        '-module-depth=[(n) The maximum depth to expand modules. By default this is zero, which will not expand modules at all.]' \
        '-no-color[If specified, output will not contain any color.]'
}

__state() {
    local -a __state_cmds
    __state_cmds=(
      'list:List resources in the state'
      'mv:Move an item in the state'
      'pull:Pull current state and output to stdout'
      'push:Update remote state from a local state file'
      'rm:Remove instances from the state' 
      'show:Show a resource in the state'
    )
    _describe -t state "state commands" __state_cmds
}

__state_list() {
  _arguments \
    '-state=[(path) Path to a Terraform state file to use to look up Terraform-managed resources. By default it will use the state "terraform.tfstate" if it exists.]' \
    '-id=[(id) Filters the results to include only instances whose resource types have an attribute named id whose value equals the given id string.]' \
    "*:address:__statelist" 
}

__state_mv() {
  _arguments \
    "-dry-run[If set, prints out what would've been moved but doesn't actually move anything.]" \
    "-backup=[(path) Path where Terraform should write the backup for the original state. This can't be disabled. If not set, Terraform will write it to the same path as the statefile with a \".backup\" extension.]:file:_files" \
    "-backup-out=[(path) Path where Terraform should write the backup for the destination state. This can't be disabled. If not set, Terraform will write it to the same path as the destination state file with a backup extension. This only needs to be specified if -state-out is set to a different path than -state.]:file:_files" \
    "-lock=[(true|false) Lock the state files when locking is supported.]:lock:(true false)" \
    "-lock-timeout=[(seconds) Duration to retry a state lock.]" \
    '-state=[(path) Path to the source state file. Defaults to the configured backend, or "terraform.tfstate"]:file:_files' \
    "-state-out=[(path) Path to the destination state file to write to. If this isn't specified, the source state file will be used. This can be a new or existing path.]:file:_files" \
    "::" \
    ":source:__statelist" \
    ":destination: " 
}

__state_push() {
  _arguments \
    "-force[Write the state even if lineages don't match or the remote serial is higher.]" \
    '-lock=[(true|false) Lock the state file when locking is supported.]:lock:(true false)' \
    "-lock-timeout=[(seconds) Duration to retry a state lock.]" \
    "::" \
    ":destination:_files"
}

__state_rm() {
  _arguments \
    "-dry-run[If set, prints out what would've been removed but doesn't actually remove anything.]" \
    "-backup=[(path) Path where Terraform should write the backup for the original state.]:file:_files" \
    "-lock=[(true|false) Lock the state files when locking is supported.]:lock:(true false)" \
    "-lock-timeout=[(seconds) Duration to retry a state lock.]" \
    '-state=[(path) Path to the state file to update. Defaults to the current workspace state.]:file:_files' \
    "*:address:__statelist" 
}


__state_show() {
  _arguments \
    '-state=[(path) Path to a Terraform state file to use to look up Terraform-managed resources. By default it will use the state "terraform.tfstate" if it exists.]' \
    "*:address:__statelist" 
}

__statelist() {
  compadd $(terraform state list $opt_args[-state])
}

__taint() {
    _arguments \
        '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-lock=[(true) Lock the state file when locking is supported.]' \
        '-lock-timeout=[(0s) Duration to retry a state lock.]' \
        '-module=[(path)  The module path where the resource lives. By default this will be root. Child modules can be specified by names. Ex. "consul" or "consul.vpc" (nested modules).]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-state=[(path) Path to read and save state (unless state-out is  specified). Defaults to "terraform.tfstate".]' \
        '-state-out=[(path) Path to write updated state file. By default, the "-state" path will be used.]' \
        "*:address:__statelist" 
}

__untaint() {
    _arguments \
    '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
    '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
    '-lock=[(true) Lock the state file when locking is supported.]' \
    '-lock-timeout=[(0s) Duration to retry a state lock.]' \
    '-module=[(path)  The module path where the resource lives. By default this will be root. Child modules can be specified by names. Ex. "consul" or "consul.vpc" (nested modules).]' \
    '-no-color[If specified, output will not contain any color.]' \
    '-state=[(path) Path to read and save state (unless state-out is  specified). Defaults to "terraform.tfstate".]' \
    '-state-out=[(path) Path to write updated state file. By default, the "-state" path will be used.]'
}

__validate() {
    _arguments \
    '-check-variables=[(true) If set to true (default), the command will check whether all required variables have been specified.]' \
    '-no-color[If specified, output will not contain any color.]' \
    '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
    '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]'
}

__workspace() {
    local -a __workspace_cmds
    __workspace_cmds=(
        'delete:Delete a workspace'
        'list:List Workspaces'
        'new:Create a new workspace'
        'select:Select a workspace'
        'show:Show the name of the current workspace'
    )
    _describe -t workspace "workspace commands" __workspace_cmds
}

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "terraform command" _terraform_cmds
  return
fi

local -a _command_args
case "$words[1]" in
  0.12upgrade)
    __012upgrade ;;
  apply)
    __apply ;;
  console)
    __console;;
  destroy)
    __destroy ;;
  fmt)
    __fmt;;
  get)
    __get ;;
  graph)
    __graph ;;
  import)
    __import;;
  init)
    __init ;;
  output)
    __output ;;
  plan)
    __plan ;;
  providers)
    __providers ;;
  push)
    __push ;;
  refresh)
    __refresh ;;
  show)
    __show ;;
  state)
    test $CURRENT -lt 3 && __state
    [[ $words[2] = "list" ]] && __state_list
    [[ $words[2] = "mv" ]] && __state_mv
    [[ $words[2] = "push" ]] && __state_push
    [[ $words[2] = "rm" ]] && __state_rm
    [[ $words[2] = "show" ]] && __state_show
    ;;
  taint)
    __taint ;;
  untaint)
    __untaint ;;
  validate)
    __validate ;;
  workspace)
    test $CURRENT -lt 3 && __workspace ;;
esac
