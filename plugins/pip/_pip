#compdef pip pip2 pip-2.7 pip3 pip-3.2 pip-3.3 pip-3.4
#autoload

# pip zsh completion, based on homebrew completion

_pip_all() {
  # we cache the list of packages (originally from the macports plugin)
  if (( ! $+piplist )); then
      zsh-pip-cache-packages
      piplist=($(cat $ZSH_PIP_CACHE_FILE))
  fi
}

_pip_installed() {
  installed_pkgs=(`pip freeze | cut -d '=' -f 1`)
}

local -a _1st_arguments
_1st_arguments=(
  'bundle:create pybundles (archives containing multiple packages)'
  'freeze:output all currently installed packages (exact versions) to stdout'
  'help:show available commands'
  'show:show information about installed packages'
  'install:install packages'
  'search:search PyPI'
  'uninstall:uninstall packages'
  'unzip:unzip individual packages'
  'zip:zip individual packages'
)

local expl
local -a all_pkgs installed_pkgs

_arguments \
  '(--version)--version[show version number of program and exit]' \
  '(-h --help)'{-h,--help}'[show help]' \
  '(-E --environment)'{-E,--environment}'[virtualenv environment to run pip in]' \
  '(-s --enable-site-packages)'{-s,--enable-site-packages}'[include site-packages in virtualenv]' \
  '(-v --verbose)'{-v,--verbose}'[give more output]' \
  '(-q --quiet)'{-q,--quiet}'[give less output]' \
  '(--log)--log[log file location]' \
  '(--proxy)--proxy[proxy in form user:passwd@proxy.server:port]' \
  '(--timeout)--timeout[socket timeout (default 15s)]' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "pip subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  search)
    _arguments \
      '(--index)--index[base URL of Python Package Index]' ;;
  freeze)
    _arguments \
      '(-l --local)'{-l,--local}'[report only virtualenv packages]' ;;
  install)
  	_arguments \
      '(-U --upgrade)'{-U,--upgrade}'[upgrade all packages to the newest available version]' \
      '(-f --find-links)'{-f,--find-links}'[URL for finding packages]' \
      '(-r --requirement)'{-r,--requirement}'[Requirements file for packages to install]:File:_files' \
      '(--no-deps --no-dependencies)'{--no-deps,--no-dependencies}'[iIgnore package dependencies]' \
      '(--no-install)--no-install[only download packages]' \
      '(--no-download)--no-download[only install downloaded packages]' \
      '(--install-option)--install-option[extra arguments to be supplied to the setup.py]' \
      '(--single-version-externally-managed)--single-version-externally-managed[do not download/install dependencies. requires --record or --root]'\
      '(--root)--root[treat this path as a fake chroot, installing into it. implies --single-version-externally-managed]'\
      '(--record)--record[file to record all installed files to.]'\
      '(-r --requirement)'{-r,--requirement}'[requirements file]: :_files'\
      '(-e --editable)'{-e,--editable}'[path of or url to source to link to instead of installing.]: :_files -/'\
      '1: :->packages' &&  return 0

      if [[ "$state" == packages ]]; then
        _pip_all
        _wanted piplist expl 'packages' compadd -a piplist
      fi ;;
  uninstall)
    _pip_installed
    _wanted installed_pkgs expl 'installed packages' compadd -a installed_pkgs ;;
  show)
    _pip_installed
    _wanted installed_pkgs expl 'installed packages' compadd -a installed_pkgs ;;
esac
